from typing import List
from typing import NewType
from typing import Tuple
from typing import cast

from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyfdl.Diagram import DEFAULT_SPRING_LENGTH
from pyfdl.Diagram import Diagram
from pyfdl.Diagram import ORIGIN_POINT
from pyfdl.Node import Node
from pyfdl.NodeLayoutInformation import NodeLayoutInformation

from pyfdl.NodeLayoutInformation import NodeLayoutInformationList

from pyfdl.Point import Point
from pyfdl.Vector import Vector

from tests.pyfdl.FakeNode import FakeNode

TwoFakeNodes = NewType('TwoFakeNodes', Tuple[FakeNode, FakeNode])


NUMBER_OF_NODES_TO_GENERATE: int = 100


class TestDiagram(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo - Humberto A. Sanchez II
        Generated: 07 February 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testDiagramSame(self):
        diagram: Diagram = Diagram()
        doppleGanger: Diagram = diagram

        self.assertEqual(diagram, doppleGanger, 'The should be the same')

    def testDiagramsNotTheSame(self):
        diagramA: Diagram = Diagram()
        diagramB: Diagram = Diagram()

        self.assertNotEqual(diagramA, diagramB, 'These are not the same')

    def testCalculateDistancePositive(self):

        metaLocation  = Point(50, 50)
        magnitude: int = Diagram.calculateDistance(a=ORIGIN_POINT, b=metaLocation)

        self.assertEqual(70, magnitude, 'Magnitude is incorrect')

    def testCalculateDistanceNegative(self):

        metaLocation  = Point(-50, -50)
        magnitude: int = Diagram.calculateDistance(a=ORIGIN_POINT, b=metaLocation)

        self.assertEqual(70, magnitude, 'Magnitude is incorrect')

    def testBearingAngleDown(self):
        diagram: Diagram = Diagram()

        endPoint:   Point = Point(x=100, y=100)
        startPoint: Point = Point(x=100, y=300)

        expectedAngle: float = -90.0
        angle:         float = diagram._getBearingAngle(start=startPoint, end=endPoint)

        self.assertAlmostEqual(expectedAngle, angle, places=2, msg='Angle not close enough')

    def testBearingAngleUp(self):
        diagram: Diagram = Diagram()

        startPoint: Point = Point(x=100, y=100)
        endPoint:   Point = Point(x=100, y=300)

        expectedAngle: float = 90.0
        angle:         float = diagram._getBearingAngle(start=startPoint, end=endPoint)

        self.assertAlmostEqual(expectedAngle, angle, places=2, msg='Angle not close enough')

    def testCalculateAttractionForce(self):

        diagram: Diagram = Diagram()

        actingOnNode, creatingForceNode = self._createTwoFakeNodes()

        expectedForce:   Vector = Vector(magnitude=46.5000, direction=45.00)
        attractionForce: Vector = diagram._calculateAttractionForce(x=actingOnNode, y=creatingForceNode, springLength=DEFAULT_SPRING_LENGTH)

        self.assertEqual(expectedForce, attractionForce, 'Attraction force miscalculation')

    def testCalculateAttractionForceInverse(self):

        diagram: Diagram = Diagram()

        actingOnNode, creatingForceNode = self._createTwoFakeNodes()

        expectedForce:   Vector = Vector(magnitude=46.5000, direction=225.00)
        attractionForce: Vector = diagram._calculateAttractionForce(x=creatingForceNode, y=actingOnNode, springLength=DEFAULT_SPRING_LENGTH)

        self.assertEqual(expectedForce, attractionForce, 'Attraction force miscalculation')

    def testCalculateRepulsionForce(self):
        diagram: Diagram = Diagram()

        actingOnNode, creatingForceNode = self._createTwoFakeNodes()

        expectedForce:  Vector = Vector(magnitude=0.03133, direction=45.00)
        repulsionForce: Vector = diagram._calculateRepulsionForce(x=creatingForceNode, y=actingOnNode)

        self.assertEqual(expectedForce, repulsionForce, 'Repulsion force miscalculation')

    def testCalculateRepulsionForceInverse(self):
        diagram: Diagram = Diagram()

        actingOnNode, creatingForceNode = self._createTwoFakeNodes()

        expectedForce:  Vector = Vector(magnitude=0.03133, direction=225.00)
        repulsionForce: Vector = diagram._calculateRepulsionForce(x=actingOnNode, y=creatingForceNode)

        self.assertEqual(expectedForce, repulsionForce, 'Repulsion force miscalculation')

    def testRemoveNode(self):

        diagram: Diagram = Diagram()

        inDiagramNode:    FakeNode = FakeNode(location=Point(x=100, y=100), fakeId=100)
        notInDiagramNode: FakeNode = FakeNode(location=Point(x=666, y=666), fakeId=666)

        diagram.addNode(inDiagramNode)

        removed: bool = diagram.removeNode(notInDiagramNode)

        self.assertEqual(False, removed, 'Was not in Diagram')

    def testScalePoint(self):

        diagram: Diagram = Diagram()

        pointToScale: Point = Point(x=100, y=100)

        expectedPoint: Point = Point(x=350, y=350)
        scaledPoint:  Point = diagram._scalePoint(point=pointToScale, scale=3.5)

        self.assertEqual(expectedPoint, scaledPoint, 'Scaling is not working correctly')

    def testDetermineRepulsionBetweenNodes(self):

        diagram: Diagram = self._createDiagramWithFakeNodes(3)

        layoutList: NodeLayoutInformationList = self._createFixedMetaNodes(diagram)

        netForce: Vector = Vector(magnitude=0.0, direction=0.0)
        for currentLayoutInformation in layoutList:
            metaNode = currentLayoutInformation.node
            netForce = diagram._determineRepulsionBetweenNodes(metaNode=metaNode)
            self.logger.info(f'Net force {netForce} against: {metaNode=}')

        self.logger.info(f'{netForce=}')
        self.assertTrue(netForce.magnitude > 0, 'Something must be computed')
        self.assertAlmostEqual(135.0, netForce.direction, 1, 'Direction is always the same with these nodes')

    def testRandomizeInitialNodeCoordinates(self):

        diagram: Diagram = self._createDiagramWithFakeNodes(NUMBER_OF_NODES_TO_GENERATE)

        layout: NodeLayoutInformationList = diagram._randomizeInitialNodeCoordinates()

        self.logger.info(f'{diagram=}')

        # Test to make sure random coordinates have actually been generated
        for layoutInfo in layout:
            fakeNode = cast(FakeNode, layoutInfo.node)
            self.assertFalse(fakeNode.location.noCoordinates(), f'Oops missed a coordinate {fakeNode}')

    def testCalculateDistance(self):

        distance: int = Diagram.calculateDistance(a=Point(100, 100), b=Point(100, 200))

        self.assertEqual(100, distance, 'Incorrect distance')

    def _createTwoFakeNodes(self) -> TwoFakeNodes:

        actingOnNode:      FakeNode = FakeNode(location=Point(x=100, y=100), fakeId=100)
        creatingForceNode: FakeNode = FakeNode(location=Point(x=500, y=500), fakeId=500)

        return TwoFakeNodes((actingOnNode, creatingForceNode))

    def _createDiagramWithFakeNodes(self, numberToGenerate: int) -> Diagram:

        diagram: Diagram = Diagram()

        parentNode: Node = FakeNode(location=Point(), fakeId=1)
        diagram.addNode(parentNode)
        for x in range(numberToGenerate):
            fakeNode: FakeNode = FakeNode(location=Point(), fakeId=x+1)
            diagram.addNode(fakeNode)
            parentNode.addChild(fakeNode)

        return diagram

    def _createFixedMetaNodes(self, diagram: Diagram) -> NodeLayoutInformationList:
        points: List[Point] = [
            Point(25, 25), Point(-25, -25), Point(0, 0)
        ]
        layout: NodeLayoutInformationList = NodeLayoutInformationList([])
        x: int = 0
        for node in diagram.nodes:
            diagramNode: Node = node
            diagramNode.location = points[x]

            layoutInformation: NodeLayoutInformation = NodeLayoutInformation(node=diagramNode,
                                                                             velocity=Vector(magnitude=0, direction=0),
                                                                             nextPosition=Point(),
                                                                             )
            layout.append(layoutInformation)
            x = x + 1

        return layout


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestDiagram))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
