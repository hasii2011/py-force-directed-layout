from typing import List
from typing import NewType
from typing import Tuple
from typing import cast

from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyforcedirectedlayout.Configuration import Configuration
from pyforcedirectedlayout.ForceDirectedLayout import ForceDirectedLayout
from pyforcedirectedlayout.ForceDirectedLayout import ORIGIN_POINT
from pyforcedirectedlayout.Node import Node
from pyforcedirectedlayout.NodeLayoutInformation import NodeLayoutInformation

from pyforcedirectedlayout.NodeLayoutInformation import NodeLayoutInformationList

from pyforcedirectedlayout.Point import Point
from pyforcedirectedlayout.Vector import Vector

from tests.pyforcedirectedlayout.FakeNode import FakeNode

TwoFakeNodes = NewType('TwoFakeNodes', Tuple[FakeNode, FakeNode])


NUMBER_OF_NODES_TO_GENERATE: int = 100
KNOWN_SPRING_LENGTH:         int = 100


class TestForceDirectedLayout(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 07 February 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

        self._configuration: Configuration = Configuration()

    def tearDown(self):
        super().tearDown()

    def testLayoutEngineSame(self):
        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()
        doppleGanger: ForceDirectedLayout = layoutEngine

        self.assertEqual(layoutEngine, doppleGanger, 'The should be the same')

    def testLayoutEngineNotTheSame(self):
        layoutEngineA: ForceDirectedLayout = ForceDirectedLayout()
        layoutEngineB: ForceDirectedLayout = ForceDirectedLayout()

        self.assertNotEqual(layoutEngineA, layoutEngineB, 'These are not the same')

    def testCalculateDistancePositive(self):

        metaLocation  = Point(50, 50)
        magnitude: int = ForceDirectedLayout.calculateDistance(a=ORIGIN_POINT, b=metaLocation)

        self.assertEqual(70, magnitude, 'Magnitude is incorrect')

    def testCalculateDistanceNegative(self):

        metaLocation  = Point(-50, -50)
        magnitude: int = ForceDirectedLayout.calculateDistance(a=ORIGIN_POINT, b=metaLocation)

        self.assertEqual(70, magnitude, 'Magnitude is incorrect')

    def testBearingAngleDown(self):
        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        endPoint:   Point = Point(x=100, y=100)
        startPoint: Point = Point(x=100, y=300)

        expectedAngle: float = -90.0
        angle:         float = layoutEngine._getBearingAngle(start=startPoint, end=endPoint)

        self.assertAlmostEqual(expectedAngle, angle, places=2, msg='Angle not close enough')

    def testBearingAngleUp(self):
        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        startPoint: Point = Point(x=100, y=100)
        endPoint:   Point = Point(x=100, y=300)

        expectedAngle: float = 90.0
        angle:         float = layoutEngine._getBearingAngle(start=startPoint, end=endPoint)

        self.assertAlmostEqual(expectedAngle, angle, places=2, msg='Angle not close enough')

    def testCalculateAttractionForce(self):

        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        actingOnNode, creatingForceNode = self._createTwoFakeNodes()

        expectedForce:   Vector = Vector(magnitude=46.5000, direction=45.00)
        attractionForce: Vector = layoutEngine._calculateAttractionForce(x=actingOnNode, y=creatingForceNode, springLength=KNOWN_SPRING_LENGTH)

        self.assertEqual(expectedForce, attractionForce, 'Attraction force miscalculation')

    def testCalculateAttractionForceInverse(self):

        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        actingOnNode, creatingForceNode = self._createTwoFakeNodes()

        expectedForce:   Vector = Vector(magnitude=46.5000, direction=225.00)
        attractionForce: Vector = layoutEngine._calculateAttractionForce(x=creatingForceNode, y=actingOnNode, springLength=KNOWN_SPRING_LENGTH)

        self.assertEqual(expectedForce, attractionForce, 'Attraction force miscalculation')

    def testCalculateRepulsionForce(self):

        saveRepulsionForce: float = self._configuration.repulsionForce

        self._configuration.repulsionForce = 10000
        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        actingOnNode, creatingForceNode = self._createTwoFakeNodes()

        expectedForce:  Vector = Vector(magnitude=0.03133, direction=45.00)
        repulsionForce: Vector = layoutEngine._calculateRepulsionForce(x=creatingForceNode, y=actingOnNode)

        self._configuration.repulsionForce = saveRepulsionForce

        self.assertEqual(expectedForce, repulsionForce, 'Repulsion force miscalculation')

    def testCalculateRepulsionForceInverse(self):

        saveRepulsionForce: float = self._configuration.repulsionForce

        self._configuration.repulsionForce = 10000
        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        actingOnNode, creatingForceNode = self._createTwoFakeNodes()

        expectedForce:  Vector = Vector(magnitude=0.03133, direction=225.00)
        repulsionForce: Vector = layoutEngine._calculateRepulsionForce(x=actingOnNode, y=creatingForceNode)

        self._configuration.repulsionForce = saveRepulsionForce

        self.assertEqual(expectedForce, repulsionForce, 'Repulsion force miscalculation')

    def testRemoveNode(self):

        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        inDiagramNode:    FakeNode = FakeNode(location=Point(x=100, y=100), fakeId=100)
        notInDiagramNode: FakeNode = FakeNode(location=Point(x=666, y=666), fakeId=666)

        layoutEngine.addNode(inDiagramNode)

        removed: bool = layoutEngine.removeNode(notInDiagramNode)

        self.assertEqual(False, removed, 'Was not in Diagram')

    def testScalePoint(self):

        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        pointToScale: Point = Point(x=100, y=100)

        expectedPoint: Point = Point(x=350, y=350)
        scaledPoint:  Point = layoutEngine._scalePoint(point=pointToScale, scale=3.5)

        self.assertEqual(expectedPoint, scaledPoint, 'Scaling is not working correctly')

    def testDetermineRepulsionBetweenNodes(self):

        layoutEngine: ForceDirectedLayout = self._createDiagramWithFakeNodes(3)

        layoutList: NodeLayoutInformationList = self._createFixedMetaNodes(layoutEngine)

        netForce: Vector = Vector(magnitude=0.0, direction=0.0)
        for currentLayoutInformation in layoutList:
            metaNode = currentLayoutInformation.node
            netForce = layoutEngine._determineRepulsionBetweenNodes(metaNode=metaNode)
            self.logger.info(f'Net force {netForce} against: {metaNode=}')

        self.logger.info(f'{netForce=}')
        self.assertTrue(netForce.magnitude > 0, 'Something must be computed')
        self.assertAlmostEqual(135.0, netForce.direction, 1, 'Direction is always the same with these nodes')

    def testRandomizeInitialNodeCoordinates(self):

        layoutEngine: ForceDirectedLayout = self._createDiagramWithFakeNodes(NUMBER_OF_NODES_TO_GENERATE)

        layout: NodeLayoutInformationList = layoutEngine._randomizeInitialNodeCoordinates()

        self.logger.info(f'{layoutEngine=}')

        # Test to make sure random coordinates have actually been generated
        for layoutInfo in layout:
            fakeNode = cast(FakeNode, layoutInfo.node)
            self.assertFalse(fakeNode.location.noCoordinates(), f'Oops missed a coordinate {fakeNode}')

    def testCalculateDistance(self):

        distance: int = ForceDirectedLayout.calculateDistance(a=Point(100, 100), b=Point(100, 200))

        self.assertEqual(100, distance, 'Incorrect distance')

    def _createTwoFakeNodes(self) -> TwoFakeNodes:

        actingOnNode:      FakeNode = FakeNode(location=Point(x=100, y=100), fakeId=100)
        creatingForceNode: FakeNode = FakeNode(location=Point(x=500, y=500), fakeId=500)

        return TwoFakeNodes((actingOnNode, creatingForceNode))

    def _createDiagramWithFakeNodes(self, numberToGenerate: int) -> ForceDirectedLayout:

        layoutEngine: ForceDirectedLayout = ForceDirectedLayout()

        parentNode: Node = FakeNode(location=Point(), fakeId=1)
        layoutEngine.addNode(parentNode)
        for x in range(numberToGenerate):
            fakeNode: FakeNode = FakeNode(location=Point(), fakeId=x+1)
            layoutEngine.addNode(fakeNode)
            parentNode.addChild(fakeNode)

        return layoutEngine

    def _createFixedMetaNodes(self, layoutEngine: ForceDirectedLayout) -> NodeLayoutInformationList:
        points: List[Point] = [
            Point(25, 25), Point(-25, -25), Point(0, 0)
        ]
        layout: NodeLayoutInformationList = NodeLayoutInformationList([])
        x: int = 0
        for node in layoutEngine.nodes:
            diagramNode: Node = node
            diagramNode.location = points[x]

            layoutInformation: NodeLayoutInformation = NodeLayoutInformation(node=diagramNode,
                                                                             velocity=Vector(magnitude=0, direction=0),
                                                                             nextPosition=Point(),
                                                                             )
            layout.append(layoutInformation)
            x = x + 1

        return layout


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestForceDirectedLayout))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
