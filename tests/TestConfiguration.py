from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pyfdl.Configuration import Configuration
from pyfdl.Point import Point


# import the class you want to test here
# from org.pyut.template import template


class TestConfiguration(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 17 February 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

        self._configuration: Configuration = Configuration()

    def tearDown(self):
        super().tearDown()

    def testSingleton(self):

        configuration: Configuration = Configuration()

        original:     str = f'{hex(id(self._configuration))}'
        doppleGanger: str = f'{hex(id(configuration))}'

        self.assertEqual(original, doppleGanger, 'IDs should be valid')

    def testDeserializeFloat(self):

        damping: float = self._configuration.damping
        self.assertTrue(isinstance(damping, float), 'Wrong type')

    def testDeserializeInt(self):

        springLength: int = self._configuration.springLength
        self.assertTrue(isinstance(springLength, int), 'Wrong type')

    def testDeserializePoint(self):

        minPoint: Point = self._configuration.minPoint
        self.assertTrue(isinstance(minPoint, Point), 'Wrong type')

    def testFactorsProperties(self):
        stopCount: int = self._configuration.stopCount
        self.assertTrue(isinstance(stopCount, int), 'Wrong type')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestConfiguration))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
